from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from uuid import uuid4
from datetime import datetime
import random

quest_router = Router()

# FSM states
class QuestCreation(StatesGroup):
    TITLE = State()
    GENRE = State()
    DESCRIPTION = State()
    REWARD = State()
    ANSWER = State()

class QuestVerification(StatesGroup):
    ANSWER = State()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data == "create_quest")
async def create_quest_start(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    msg = await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(messages=[msg.message_id])
    await state.set_state(QuestCreation.TITLE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞
@quest_router.message(QuestCreation.TITLE)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    msg = await message.answer(
        "üé≠ –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–≤–µ—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    data = await state.get_data()
    messages = data.get('messages', [])
    messages.append(msg.message_id)
    await state.update_data(messages=messages)
    await state.set_state(QuestCreation.GENRE)
    

# –ö–ª–∞—Å—Å –¥–ª—è –∫–≤–µ—Å—Ç–∞
class Quest:
    def __init__(self, owner_id: int, title: str, genre: str, description: str, reward: int, answer: str):
        self.id = str(uuid4())  # ID –∫–≤–µ—Å—Ç–∞
        self.owner_id = owner_id  # ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
        self.title = title  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
        self.genre = genre  # –ñ–∞–Ω—Ä –∫–≤–µ—Å—Ç–∞
        self.description = description  # –û–ø–∏—Å–∞–Ω–∏–µ
        self.reward = reward  # –ù–∞–≥—Ä–∞–¥–∞ (10‚Äì100 –æ—á–∫–æ–≤)
        self.answer = answer  # –û—Ç–≤–µ—Ç
        self.created_at = datetime.now()  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        self.status = 'active'  # –°—Ç–∞—Ç—É—Å: active/completed/canceled
        self.messages = []  # –°–æ–æ–±—â–µ–Ω–∏—è —Å –∫–≤–µ—Å—Ç–æ–º
        self.attempts = {}  # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ {user_id: {'chat_id': chat_id, 'message_id': message_id, 'answer': answer}}

# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User:
    def __init__(self, user_id: int):
        self.user_id = user_id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.points = 100  # –û—á–∫–∏
        self.reserved_points = 0  # –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—á–∫–∏
        self.created_quests = []  # –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
        self.completed_quests = []  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
users: dict[int, User] = {}  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {user_id: User}
quests: dict[str, Quest] = {}  # –í—Å–µ –∫–≤–µ—Å—Ç—ã {quest_id: Quest}

# –£—Ç–∏–ª–∏—Ç—ã
def get_user(user_id: int) -> User:
    if user_id not in users:
        users[user_id] = User(user_id)
    return users[user_id]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="create_quest")
    builder.button(text="üìú –ú–æ–∏ –∫–≤–µ—Å—Ç—ã", callback_data="my_quests")
    builder.button(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç", callback_data="random_quest")
    builder.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    builder.adjust(1)
    return builder

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–≤–µ—Å—Ç–∞
async def delete_quest_messages(quest: Quest, bot: Bot):
    for msg in quest.messages:
        try:
            await bot.delete_message(chat_id=msg['chat_id'], message_id=msg['message_id'])
        except Exception:
            pass
    quest.messages.clear()

# –ö–æ–º–∞–Ω–¥–∞ /quest
@quest_router.message(Command('quest'))
async def quest_handler(message: Message):
    await message.answer(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–≤–µ—Å—Ç–æ–≤!",
        reply_markup=main_menu().as_markup()
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data == "create_quest")
async def create_quest_start(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    msg = await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(messages=[msg.message_id])
    await state.set_state(QuestCreation.TITLE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞
@quest_router.message(QuestCreation.TITLE)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    msg = await message.answer(
        "üé≠ –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–≤–µ—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    data = await state.get_data()
    messages = data.get('messages', [])
    messages.append(msg.message_id)
    await state.update_data(messages=messages)
    await state.set_state(QuestCreation.GENRE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–∞ –∫–≤–µ—Å—Ç–∞
@quest_router.message(QuestCreation.GENRE)
async def process_genre(message: Message, state: FSMContext):
    await state.update_data(genre=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    msg = await message.answer(
        "üìñ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    data = await state.get_data()
    messages = data.get('messages', [])
    messages.append(msg.message_id)
    await state.update_data(messages=messages)
    await state.set_state(QuestCreation.DESCRIPTION)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞
@quest_router.message(QuestCreation.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    msg = await message.answer(
        "üí∞ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (10‚Äì100 –æ—á–∫–æ–≤):",
        reply_markup=builder.as_markup()
    )
    data = await state.get_data()
    messages = data.get('messages', [])
    messages.append(msg.message_id)
    await state.update_data(messages=messages)
    await state.set_state(QuestCreation.REWARD)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –∫–≤–µ—Å—Ç–∞
@quest_router.message(QuestCreation.REWARD)
async def process_reward(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    try:
        reward = int(message.text)
        if not 10 <= reward <= 100:
            raise ValueError
        if reward > (user.points - user.reserved_points):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤!")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 100!")
        return
    user.reserved_points += reward
    await state.update_data(reward=reward)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    msg = await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å:",
        reply_markup=builder.as_markup()
    )
    data = await state.get_data()
    messages = data.get('messages', [])
    messages.append(msg.message_id)
    await state.update_data(messages=messages)
    await state.set_state(QuestCreation.ANSWER)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–≤–µ—Å—Ç–∞
@quest_router.message(QuestCreation.ANSWER)
async def process_answer(message: Message, state: FSMContext, bot: Bot):
    user = get_user(message.from_user.id)
    data = await state.get_data()
    quest = Quest(
        owner_id=user.user_id,
        title=data['title'],
        genre=data['genre'],
        description=data['description'],
        reward=data['reward'],
        answer=message.text
    )
    user.reserved_points -= quest.reward
    quests[quest.id] = quest
    user.created_quests.append(quest.id)
    await message.answer(
        f"‚úÖ –ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!\n–ù–∞–≥—Ä–∞–¥–∞: {quest.reward} –æ—á–∫–æ–≤",
        reply_markup=main_menu().as_markup()
    )
    await state.clear()

# –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
@quest_router.callback_query(F.data == "my_quests")
async def show_my_quests(callback: CallbackQuery):
    user = get_user(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    for quest_id in user.created_quests:
        quest = quests.get(quest_id)
        if quest and quest.status == 'active':
            builder.button(
                text=f"‚ùå {quest.title} ({quest.reward} –æ—á–∫–æ–≤)",
                callback_data=f"cancel_{quest_id}"
            )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    await callback.message.edit_text(
        "üìú –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:",
        reply_markup=builder.as_markup()
    )

# –û—Ç–º–µ–Ω–∞ –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data.startswith("cancel_"))
async def cancel_quest_handler(callback: CallbackQuery):
    quest_id = callback.data.split("_")[1]
    quest = quests.get(quest_id)
    if not quest:
        await callback.answer("‚ùå –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_cancel_{quest_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_quests")
    builder.adjust(2)

    await callback.message.edit_text(
        f"‚ùó –í–µ—Ä–Ω—É—Ç—å {quest.reward} –æ—á–∫–æ–≤ –∏ —É–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç?",
        reply_markup=builder.as_markup()
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data.startswith("confirm_cancel_"))
async def confirm_cancel(callback: CallbackQuery, bot: Bot):
    quest_id = callback.data.split("_")[2]
    quest = quests.get(quest_id)
    user = get_user(callback.from_user.id)
    if quest and quest.status == 'active':
        user.reserved_points -= quest.reward
        user.points += quest.reward
        await delete_quest_messages(quest, bot)
        quest.status = 'canceled'
        user.created_quests.remove(quest_id)
        await callback.answer("‚úÖ –ö–≤–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω!", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã!", show_alert=True)
    await callback.message.edit_text(
        "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu().as_markup()
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data == "random_quest")
async def random_quest_handler(callback: CallbackQuery):
    active_quests = [q for q in quests.values() if q.status == 'active']
    if not active_quests:
        await callback.answer("üòû –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤", show_alert=True)
        return
    quest = random.choice(active_quests)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç", callback_data=f"accept_{quest.id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    msg = await callback.message.edit_text(
        f"üéØ –ö–≤–µ—Å—Ç: {quest.title}\n"
        f"üé≠ –ñ–∞–Ω—Ä: {quest.genre}\n"
        f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {quest.description}\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {quest.reward} –æ—á–∫–æ–≤",
        reply_markup=builder.as_markup()
    )
    quest.messages.append({'chat_id': msg.chat.id, 'message_id': msg.message_id})

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data.startswith("accept_"))
async def accept_quest(callback: CallbackQuery, state: FSMContext):
    quest_id = callback.data.split("_")[1]
    quest = quests.get(quest_id)
    if quest and quest.status == 'active':
        await state.update_data(quest_id=quest_id)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        msg = await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        quest.messages.append({'chat_id': msg.chat.id, 'message_id': msg.message_id})
        await state.set_state(QuestVerification.ANSWER)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–µ—Å—Ç
@quest_router.message(QuestVerification.ANSWER)
async def verify_answer(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    quest_id = data.get('quest_id')
    quest = quests.get(quest_id)
    user = get_user(message.from_user.id)

    if not quest or quest.status != 'active':
        await message.answer("‚ùå –ö–≤–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –∫–≤–µ—Å—Ç–∞
    if user.user_id == quest.owner_id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç!")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–≤–µ—Ç–∞
    quest.attempts[user.user_id] = {
        'chat_id': message.chat.id,
        'message_id': message.message_id,
        'answer': message.text
    }

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"approve_{quest_id}_{user.user_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"reject_{quest_id}_{user.user_id}")
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –∫–≤–µ—Å—Ç–∞
    await bot.send_message(
        quest.owner_id,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∫–≤–µ—Å—Ç '{quest.title}':\n"
        f"üìù –û—Ç–≤–µ—Ç: {message.text}\n\n"
        f"üîë –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quest.answer}",
        reply_markup=builder.as_markup()
    )

    await message.answer("‚è≥ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä—É –∫–≤–µ—Å—Ç–∞")
    await state.clear()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data.startswith("approve_"))
async def approve_answer(callback: CallbackQuery, bot: Bot):
    _, quest_id, user_id = callback.data.split("_")
    quest = quests.get(quest_id)
    author = get_user(callback.from_user.id)
    user = get_user(int(user_id))

    if quest and quest.status == 'active' and quest.owner_id == author.user_id:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.points += quest.reward
        # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—á–∫–∏ –∞–≤—Ç–æ—Ä–∞
        author.reserved_points -= quest.reward
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        user.completed_quests.append(quest_id)
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–µ—Å—Ç–∞ –Ω–∞ "completed"
        quest.status = 'completed'
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
        await delete_quest_messages(quest, bot)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã
        await bot.send_message(
            user.user_id,
            f"‚úÖ –ê–≤—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {quest.reward} –æ—á–∫–æ–≤"
        )
        await callback.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!")

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data.startswith("reject_"))
async def reject_answer(callback: CallbackQuery, bot: Bot):
    _, quest_id, user_id = callback.data.split("_")
    quest = quests.get(quest_id)
    author = get_user(callback.from_user.id)
    user = get_user(int(user_id))
    if quest and quest.status == 'active' and quest.owner_id == author.user_id:
        await bot.send_message(user.user_id, "‚ùå –ê–≤—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        attempt = quest.attempts.get(user.user_id)
        if attempt:
            try:
                await bot.delete_message(attempt['chat_id'], attempt['message_id'])
            except Exception:
                pass
            del quest.attempts[user.user_id]
        await callback.answer("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")

# –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞
@quest_router.callback_query(F.data == "balance")
async def show_balance(callback: CallbackQuery):
    user = get_user(callback.from_user.id)
    await callback.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.points} –æ—á–∫–æ–≤",
        show_alert=True
    )

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@quest_router.callback_query(F.data == "main_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu().as_markup()
    )

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞
@quest_router.callback_query(F.data == "cancel_creation")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = get_user(callback.from_user.id)
    if 'reward' in data:
        user.points += data['reward']
        user.reserved_points -= data['reward']
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_menu().as_markup()
    )
