# ppsb>app>quests
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
import asyncio
from database import db

quest_router = Router()

class CreateQuestStates(StatesGroup):
    GENRE = State()
    REWARD = State()
    DESCRIPTION = State()

# –ö–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB
quests_collection = db["quests"]
user_profiles_collection = db["user_profiles"]
quest_timers_collection = db["quest_timers"]

async def check_quest_timers(bot):
    while True:
        current_time = datetime.now()
        async for timer in quest_timers_collection.find():
            user_id = timer["user_id"]
            quest_name = timer["quest_name"]
            end_time = timer["end_time"]
            if current_time >= end_time:
                user_profile = await user_profiles_collection.find_one({"user_id": user_id})
                if user_profile and user_profile.get("current_quest") == quest_name:
                    await user_profiles_collection.update_one(
                        {"user_id": user_id},
                        {
                            "$push": {"completed_quests": quest_name},
                            "$inc": {"points": quests_collection.find_one({"name": quest_name})["reward"]},
                            "$unset": {"current_quest": ""}
                        }
                    )
                    await quest_timers_collection.delete_one({"user_id": user_id})
                    await bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∫–≤–µ—Å—Ç '{quest_name}' –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.")
        await asyncio.sleep(60)

@quest_router.message(Command("create_quest"))
async def start_create_quest(message: Message, state: FSMContext):
    await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞.\n–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –ø—Ä–µ—Å—Å–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Future Bass', 'EDM').")
    await state.set_state(CreateQuestStates.GENRE)

@quest_router.message(CreateQuestStates.GENRE)
async def process_genre(message: Message, state: FSMContext):
    genre = message.text.strip()
    if not genre:
        await message.answer("–ñ–∞–Ω—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(genre=genre)
    await message.answer("–®–∞–≥ 2/3: –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 100).")
    await state.set_state(CreateQuestStates.REWARD)

@quest_router.message(CreateQuestStates.REWARD)
async def process_reward(message: Message, state: FSMContext):
    try:
        reward = int(message.text.strip())
        if reward < 10 or reward > 100:
            raise ValueError()
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(reward=reward)
    await message.answer("–®–∞–≥ 3/3: –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ—Å—Å–µ—Ç –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ Massive').")
    await state.set_state(CreateQuestStates.DESCRIPTION)

@quest_router.message(CreateQuestStates.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    description = message.text.strip()
    if not description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = await state.get_data()
    quest_name = f"CustomQuest_{message.from_user.id}_{int(datetime.now().timestamp())}"
    quest_data = {
        "name": quest_name,
        "genre": data["genre"],
        "reward": data["reward"],
        "description": description,
        "creator_id": message.from_user.id,
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    await quests_collection.insert_one(quest_data)
    await message.answer(f"–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    await state.clear()

@quest_router.message(Command("profile"))
async def show_profile(message: Message):
    user_id = message.from_user.id
    user_profile = await user_profiles_collection.find_one({"user_id": user_id})
    if not user_profile:
        user_profile = {
            "user_id": user_id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "completed_quests": [],
            "points": 0
        }
        await user_profiles_collection.insert_one(user_profile)
    completed_quests = len(user_profile.get("completed_quests", []))
    points = user_profile.get("points", 0)
    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üìù –ò–º—è: {user_profile['first_name']}\n"
        f"üî¢ ID: {user_id}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: {completed_quests}\n"
        f"‚≠ê –û—á–∫–∏: {points}"
    )

@quest_router.message(Command("quests"))
async def start_quest(message: Message):
    user_id = message.from_user.id
    user_profile = await user_profiles_collection.find_one({"user_id": user_id})
    if not user_profile:
        user_profile = {
            "user_id": user_id,
            "current_quest": None,
            "completed_quests": [],
            "progress": {}
        }
        await user_profiles_collection.insert_one(user_profile)
    available_quests = [
        quest async for quest in quests_collection.find({"creator_id": {"$ne": user_id}, "name": {"$nin": user_profile["completed_quests"]}})
    ]
    if not available_quests:
        await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–≤–µ—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=quest["name"], callback_data=f"start_quest:{quest['name']}")]
            for quest in available_quests
        ]
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å:",
        reply_markup=keyboard
    )

@quest_router.callback_query(F.data.startswith("start_quest:"))
async def handle_start_quest(callback: CallbackQuery):
    quest_name = callback.data.split(":")[1]
    user_id = callback.from_user.id
    user_profile = await user_profiles_collection.find_one({"user_id": user_id})
    if quest_name in user_profile.get("completed_quests", []):
        await callback.answer("–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç!", show_alert=True)
        return
    await user_profiles_collection.update_one({"user_id": user_id}, {"$set": {"current_quest": quest_name}})
    end_time = datetime.now() + timedelta(days=3)
    await quest_timers_collection.insert_one({"user_id": user_id, "quest_name": quest_name, "end_time": end_time})
    await callback.message.edit_text(f"–í—ã –Ω–∞—á–∞–ª–∏ –∫–≤–µ—Å—Ç: {quest_name}. –£ –≤–∞—Å –µ—Å—Ç—å 3 –¥–Ω—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
    await callback.answer()

async def start_check_quest_timers(bot):
    asyncio.create_task(check_quest_timers(bot))