from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from config import GITHUB, DONATE, CHANNEL, DB_NAME
from app.quests import show_quests_menu, list_quests, start_create_quest
from app.presets import start_upload_preset, list_presets
from app.review import start_review
from app.profile import show_profile
import logging
from aiogram.fsm.context import FSMContext
from datetime import datetime
from database import get_db
from app.utils import message_id_storage

router = Router()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def back_to_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

def main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç üéÆ", callback_data="create_quest"),
         InlineKeyboardButton(text="–ú–æ–∏ –∫–≤–µ—Å—Ç—ã üìã", callback_data="my_quests")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile"),
         InlineKeyboardButton(text="–ü–æ–º–æ—â—å üí°", callback_data="help")],
        [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç üéß", callback_data="upload_preset"),
         InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å –ø—Ä–µ—Å–µ—Ç üì•", callback_data="list_presets")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è", callback_data="review"),
         InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ üîç", callback_data="quests")],
        [InlineKeyboardButton(text="–õ–∏–¥–µ—Ä—Å–∫–∞—è –¥–æ—Å–∫–∞ üèÜ", callback_data="leaderboard"),
         InlineKeyboardButton(text="GitHub üõ†Ô∏è", callback_data="github")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∏", callback_data="donate"),
         InlineKeyboardButton(text="–ö–∞–Ω–∞–ª üì£", callback_data="channel")]
    ])

@router.message(CommandStart())
async def start(message: Message):
    logger.info(f"User {message.from_user.id} used /start command.")
    db_instance = get_db()
    if db_instance is None:
        logger.error(f"Database '{DB_NAME}' is not initialized. Cannot process /start command.")
        await message.answer(f"–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    user_profile_collection = db_instance["user_profile"]
    user_id = message.from_user.id
    try:
        user = await user_profile_collection.find_one({"user_id": user_id})
        if not user:
            user_data = {
                "user_id": user_id,
                "username": message.from_user.username or message.from_user.first_name or "–ë–µ–∑ –Ω–∏–∫–∞",
                "first_name": message.from_user.first_name,
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "quests_completed": 0,
                "presets_uploaded": 0,
                "reviews_written": 0,
                "balance": 100
            }
            await user_profile_collection.insert_one(user_data)
            logger.info(f"Created new profile for user {user_id} with balance 100.")
    except Exception as e:
        logger.error(f"Failed to process /start for user {user_id}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    keyboard = main_menu_keyboard()
    text = (
        "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∑–≤—É–∫–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞! üéµ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚ú® –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤.\n"
        "üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n"
        "üéß –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –ø—Ä–µ—Å–µ—Ç—ã.\n"
        "üìù –û—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    chat_id = message.chat.id
    if chat_id in message_id_storage:
        try:
            await message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id_storage[chat_id],
                text=text,
                reply_markup=keyboard
            )
            return
        except Exception as e:
            logger.warning(f"Failed to edit message {message_id_storage[chat_id]}: {e}")

    msg = await message.answer(text, reply_markup=keyboard)
    if len(message_id_storage) > 1000:
        message_id_storage.clear()
    message_id_storage[chat_id] = msg.message_id

@router.message(Command("leaderboard"))
async def leaderboard_command(message: Message):
    logger.info(f"User {message.from_user.id} used /leaderboard command.")
    db_instance = get_db()
    if db_instance is None:
        logger.error(f"Database '{DB_NAME}' is not initialized. Cannot process /leaderboard command.")
        await message.answer(f"–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    user_profile_collection = db_instance["user_profile"]
    try:
        top_users = await user_profile_collection.aggregate([
            {"$sort": {"quests_completed": -1}},
            {"$limit": 10}
        ]).to_list(length=None)
        if not top_users:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤.", reply_markup=back_to_menu_keyboard())
            return
        leaderboard_text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∫–≤–µ—Å—Ç–∞–º:\n\n"
        for i, user in enumerate(top_users, 1):
            leaderboard_text += f"{i}. @{user['username']} - {user['quests_completed']} –∫–≤–µ—Å—Ç–æ–≤\n"
        await message.answer(leaderboard_text, reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f"Failed to fetch leaderboard: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–µ—Ä—Å–∫–æ–π –¥–æ—Å–∫–∏.")

@router.message(Command("rate_preset"))
async def rate_preset_command(message: Message):
    logger.info(f"User {message.from_user.id} used /rate_preset command: {message.text}")
    db_instance = get_db()
    if db_instance is None:
        logger.error(f"Database '{DB_NAME}' is not initialized. Cannot process /rate_preset command.")
        await message.answer(f"–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    presets_collection = db_instance["presets"]
    try:
        _, preset_name, rating = message.text.split(maxsplit=2)
        rating = int(rating)
        if not (1 <= rating <= 5):
            raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /rate_preset <preset_name> <rating>", reply_markup=back_to_menu_keyboard())
        return

    try:
        preset = await presets_collection.find_one({"name": preset_name})
        if not preset:
            await message.answer("–ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_menu_keyboard())
            return

        user_id = message.from_user.id
        ratings = preset.get("ratings", [])
        if any(r["user_id"] == user_id for r in ratings):
            await message.answer("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç.", reply_markup=back_to_menu_keyboard())
            return

        ratings.append({"user_id": user_id, "rating": rating})
        avg_rating = sum(r["rating"] for r in ratings) / len(ratings)
        await presets_collection.update_one(
            {"name": preset_name},
            {"$set": {"ratings": ratings, "avg_rating": avg_rating}}
        )
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {preset_name}: {avg_rating:.1f}", reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f"Failed to rate preset '{preset_name}': {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –ø—Ä–µ—Å–µ—Ç–∞.")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "create_quest")
async def handle_create_quest_callback(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} clicked '–°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç üéÆ'.")
    await start_create_quest(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "profile")
async def handle_profile_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–ü—Ä–æ—Ñ–∏–ª—å üë§'.")
    await show_profile(callback.message)
    await callback.answer()

@router.callback_query(F.data == "upload_preset")
async def handle_upload_preset_callback(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} clicked '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç üéß'.")
    await start_upload_preset(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "review")
async def handle_review_callback(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} clicked '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è'.")
    await start_review(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "list_presets")
async def handle_list_presets_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–°–∫–∞—á–∞—Ç—å –ø—Ä–µ—Å–µ—Ç üì•'.")
    await list_presets(callback.message)
    await callback.answer()

@router.callback_query(F.data == "quests")
async def handle_quests_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ üîç'.")
    await show_quests_menu(callback.message)
    await callback.answer()

@router.callback_query(F.data == "my_quests")
async def handle_my_quests_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–ú–æ–∏ –∫–≤–µ—Å—Ç—ã üìã'.")
    db_instance = get_db()
    if db_instance is None:
        logger.error(f"Database '{DB_NAME}' is not initialized. Cannot process my_quests callback.")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    await list_quests(
        message=callback.message,
        is_my_quests=True,
        user_id=callback.from_user.id,
        db_instance=db_instance
    )
    await callback.answer()

@router.callback_query(F.data == "help")
async def handle_help_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–ü–æ–º–æ—â—å üí°'.")
    await handle_help(callback.message)
    await callback.answer()

@router.callback_query(F.data == "leaderboard")
async def handle_leaderboard_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–õ–∏–¥–µ—Ä—Å–∫–∞—è –¥–æ—Å–∫–∞ üèÜ'.")
    db_instance = get_db()
    if db_instance is None:
        logger.error(f"Database '{DB_NAME}' is not initialized. Cannot process leaderboard callback.")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    user_profile_collection = db_instance["user_profile"]
    try:
        top_users = await user_profile_collection.aggregate([
            {"$sort": {"quests_completed": -1}},
            {"$limit": 10}
        ]).to_list(length=None)
        if not top_users:
            await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤.", reply_markup=back_to_menu_keyboard())
            return
        leaderboard_text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∫–≤–µ—Å—Ç–∞–º:\n\n"
        for i, user in enumerate(top_users, 1):
            leaderboard_text += f"{i}. @{user['username']} - {user['quests_completed']} –∫–≤–µ—Å—Ç–æ–≤\n"
        await callback.message.answer(leaderboard_text, reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f"Failed to fetch leaderboard: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–µ—Ä—Å–∫–æ–π –¥–æ—Å–∫–∏.")
    await callback.answer()

@router.callback_query(F.data == "github")
async def handle_github_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked 'GitHub üõ†Ô∏è'.")
    await callback.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub: {GITHUB}\n\n", reply_markup=back_to_menu_keyboard())
    await callback.answer()

@router.callback_query(F.data == "donate")
async def handle_donate_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∏'.")
    await callback.message.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {DONATE}\n\n", reply_markup=back_to_menu_keyboard())
    await callback.answer()

@router.callback_query(F.data == "channel")
async def handle_channel_callback(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} clicked '–ö–∞–Ω–∞–ª üì£'.")
    await callback.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL}\n\n", reply_markup=back_to_menu_keyboard())
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} returned to main menu.")
    chat_id = callback.message.chat.id
    text = (
        "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∑–≤—É–∫–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞! üéµ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚ú® –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤.\n"
        "üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n"
        "üéß –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –ø—Ä–µ—Å–µ—Ç—ã.\n"
        "üìù –û—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    if chat_id in message_id_storage:
        try:
            await callback.message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id_storage[chat_id],
                text=text,
                reply_markup=main_menu_keyboard()
            )
            await callback.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            return
        except Exception as e:
            logger.warning(f"Failed to edit message {message_id_storage[chat_id]}: {e}")
    msg = await callback.message.answer(text, reply_markup=main_menu_keyboard())
    if len(message_id_storage) > 1000:
        message_id_storage.clear()
    message_id_storage[chat_id] = msg.message_id
    await callback.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

@router.message(Command('help'))
async def help_command(message: Message):
    await handle_help(message)

@router.message(Command('github'))
async def github(message: Message):
    logger.info(f"User {message.from_user.id} used /github command.")
    await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub: {GITHUB}\n\n", reply_markup=back_to_menu_keyboard())

@router.message(Command('donate'))
async def donate(message: Message):
    logger.info(f"User {message.from_user.id} used /donate command.")
    await message.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {DONATE}\n\n", reply_markup=back_to_menu_keyboard())

@router.message(Command('profile'))
async def profile_command(message: Message):
    logger.info(f"User {message.from_user.id} used /profile command.")
    await show_profile(message)

async def handle_help(message: Message):
    logger.info(f"User {message.from_user.id} used /help command.")
    chat_id = message.chat.id
    text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "/start ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "/help ‚Äì –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.\n"
        "/github ‚Äì –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞.\n"
        "/donate ‚Äì –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.\n"
        "/create_quest ‚Äì –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç.\n"
        "/profile ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è.\n"
        "/quests ‚Äì –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤.\n"
        "/upload_preset ‚Äì –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç.\n"
        "/list_presets ‚Äì –°–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤.\n"
        "/rate_preset ‚Äì –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç.\n"
        "/review ‚Äì –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤.\n"
        "/leaderboard ‚Äì –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "/channel ‚Äì –ù–∞—à –∫–∞–Ω–∞–ª.\n\n"
        "üåü –í–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤!\n\n"
    )
    if chat_id in message_id_storage:
        try:
            await message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id_storage[chat_id],
                text=text,
                reply_markup=back_to_menu_keyboard()
            )
            return
        except Exception as e:
            logger.warning(f"Failed to edit message {message_id_storage[chat_id]}: {e}")

    msg = await message.answer(text, reply_markup=back_to_menu_keyboard())
    if len(message_id_storage) > 1000:
        message_id_storage.clear()
    message_id_storage[chat_id] = msg.message_id
