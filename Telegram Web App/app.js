const tg = window.Telegram.WebApp;
tg.expand();
tg.MainButton.setText("–ó–∞–∫—Ä—ã—Ç—å").onClick(() => tg.close()).show();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userData = tg.initDataUnsafe;
const userId = userData?.user?.id || "guest";
let balance = 100;

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Telegram
function syncWithTelegram() {
    tg.CloudStorage.setItem("userBalance", balance.toString(), (err) => {
        if (err) console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async function updateBalance(amount) {
    balance += amount;
    try {
        await fetch('https://your-server.com/update-balance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Telegram-User-ID': userId,
            },
            body: JSON.stringify({ balance }),
        });
        syncWithTelegram();
        tg.showPopup({ title: '–£—Å–ø–µ—Ö!', message: `–ë–∞–ª–∞–Ω—Å: ${balance} CP`, buttons: [{ type: 'close' }] });
    } catch (error) {
        tg.showAlert("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞");
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
document.getElementById('upload-preset-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const file = document.getElementById('presetFile').files[0];
    if (file.size > 2 * 1024 * 1024) {
        tg.showAlert("–§–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2 –ú–ë");
        return;
    }

    const preset = {
        id: Date.now().toString(),
        name: document.getElementById('presetName').value,
        description: document.getElementById('presetDescription').value,
        file: file.name,
        likes: 0,
        comments: []
    };

    presets.push(preset);
    localStorage.setItem('presets', JSON.stringify(presets));
    tg.showAlert("–ü—Ä–µ—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!");
    updateBalance(10);
    window.location.href = `preset.html?id=${preset.id}`; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ—Å–µ—Ç–∞
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤
document.getElementById('create-quest-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const quest = {
        id: Date.now().toString(),
        name: document.getElementById('questName').value,
        description: document.getElementById('questDescription').value,
        reward: parseInt(document.getElementById('questReward').value, 10),
        completed: false
    };

    quests.push(quest);
    localStorage.setItem('quests', JSON.stringify(quests));
    tg.showAlert("–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!");
    renderQuests();
});

// –†–µ–Ω–¥–µ—Ä –∫–≤–µ—Å—Ç–æ–≤
function renderQuests() {
    const questsList = document.getElementById('quests-list');
    questsList.innerHTML = quests.map(quest => `
        <div class="quest-card">
            <h3>${quest.name}</h3>
            <p>${quest.description}</p>
            <p>–ù–∞–≥—Ä–∞–¥–∞: ${quest.reward} CP</p>
            <button class="btn btn-primary" onclick="completeQuest('${quest.id}')">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
        </div>
    `).join('');
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
function completeQuest(questId) {
    const quest = quests.find(q => q.id === questId);
    if (quest) {
        quest.completed = true;
        updateBalance(quest.reward);
        localStorage.setItem('quests', JSON.stringify(quests));
        renderQuests();
    }
}

// –†–µ–Ω–¥–µ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤
function renderPresets() {
    const presetsList = document.getElementById('presets-list');
    presetsList.innerHTML = presets.map(preset => `
        <div class="preset-card" onclick="window.location.href='preset.html?id=${preset.id}'">
            <h3>${preset.name}</h3>
            <p>${preset.description}</p>
            <p>‚ù§Ô∏è ${preset.likes}</p>
        </div>
    `).join('');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    renderPresets();
    renderQuests();
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã —Å Telegram
function loadTheme() {
    const theme = tg.colorScheme;
    document.documentElement.setAttribute('data-theme', theme);
    tg.setHeaderColor(theme === 'dark' ? '#2d3748' : '#f8fafc');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
function validatePresetForm() {
    const file = document.getElementById('presetFile').files[0];
    if (file.size > 2 * 1024 * 1024) {
        tg.showAlert("–§–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2 –ú–ë");
        tg.HapticFeedback.notificationOccurred('error');
        return false;
    }
    return true;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram
document.getElementById('upload-preset-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('file', document.getElementById('presetFile').files[0]);

    try {
        const response = await tg.sendData(JSON.stringify({
            method: 'uploadPreset',
            userId: userData.user.id,
            formData,
        }));
        if (response.ok) {
            tg.showAlert("–ü—Ä–µ—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!");
            tg.HapticFeedback.notificationOccurred('success');
            updateBalance(10);
            checkAchievements('upload');
        }
    } catch (error) {
        tg.showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    }
});

// –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
const shareBtn = new tg.Button('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', () => {
    tg.share({
        title: '–ü—Ä–µ—Å–µ—Ç—ã',
        text: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç!',
        url: window.location.href,
    });
});
tg.MainButton.setParams({ is_visible: true }).setText("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è");

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = [
    { id: 1, name: '–ù–æ–≤–∏—á–æ–∫', description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ—Ç', target: 1, progress: 0, completed: false },
    { id: 2, name: '–≠–Ω—Ç—É–∑–∏–∞—Å—Ç', description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ 5 –ø—Ä–µ—Å–µ—Ç–æ–≤', target: 5, progress: 0, completed: false },
    { id: 3, name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π', description: '–û—Å—Ç–∞–≤—å—Ç–µ 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', target: 10, progress: 0, completed: false },
    { id: 4, name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π', description: '–ü–æ–ª—É—á–∏—Ç–µ 50 –ª–∞–π–∫–æ–≤', target: 50, progress: 0, completed: false },
    { id: 5, name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', description: '–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ 20 –ø—Ä–µ—Å–µ—Ç–æ–≤', target: 20, progress: 0, completed: false },
];

function checkAchievements(type) {
    achievements.forEach(achievement => {
        switch (achievement.id) {
            case 1:
                if (type === 'upload') achievement.progress++;
                break;
            case 3:
                if (type === 'comment') achievement.progress++;
                break;
            case 4:
                if (type === 'like') achievement.progress++;
                break;
        }

        if (achievement.progress >= achievement.target && !achievement.completed) {
            achievement.completed = true;
            tg.showAlert(`üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
        }
    });
    updateAchievementsUI();
}

function updateAchievementsUI() {
    const achievementsSection = document.getElementById('achievements-section');
    if (!achievementsSection) return;

    achievementsSection.innerHTML = achievements.map(achievement => `
        <div class="achievement-card">
            <h3>${achievement.name}</h3>
            <p>${achievement.description}</p>
            <div class="progress-bar">
                <div style="width: ${(achievement.progress / achievement.target) * 100}%"></div>
            </div>
            <p>${achievement.completed ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}</p>
        </div>
    `).join('');
}

// –¢–æ–ø-–ø—Ä–µ—Å–µ—Ç—ã
let presets = JSON.parse(localStorage.getItem('presets')) || [];
function updateTopPresets() {
    const sorted = [...presets].sort((a, b) => (b.likes || 0) - (a.likes || 0));
    const top10 = sorted.slice(0, 10);
    renderTopPresets(top10);
}

function renderTopPresets(data) {
    const container = document.getElementById('top-presets-list');
    container.innerHTML = data.map(preset => `
        <div class="preset-card" id="${preset.id}">
            <h3>${preset.name}</h3>
            <p>${preset.description}</p>
            <div class="preset-meta">
                <span>‚ù§Ô∏è ${preset.likes || 0}</span>
                <button class="btn btn-icon" onclick="toggleLike('${preset.id}')">
                    <i class="fas fa-heart"></i>
                </button>
                <button class="btn btn-icon" onclick="showComments('${preset.id}')">
                    <i class="fas fa-comment"></i>
                </button>
            </div>
            <div class="comments-section" id="comments-${preset.id}"></div>
        </div>
    `).join('');
}

// –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∞–π–∫–æ–≤
function addComment(presetId, text) {
    const preset = presets.find(p => p.id === presetId);
    if (!preset.comments) preset.comments = [];
    preset.comments.push({ user: userId, text, date: new Date() });
    localStorage.setItem('presets', JSON.stringify(presets));
    checkAchievements('comment');
    updateTopPresets();
}

function toggleLike(presetId) {
    const preset = presets.find(p => p.id === presetId);
    preset.likes = (preset.likes || 0) + 1;
    localStorage.setItem('presets', JSON.stringify(presets));
    checkAchievements('like');
    updateTopPresets();
}

function showComments(presetId) {
    const preset = presets.find(p => p.id === presetId);
    const commentsSection = document.getElementById(`comments-${presetId}`);
    commentsSection.innerHTML = preset.comments?.map(comment => `
        <div class="comment">
            <strong>${comment.user}:</strong> ${comment.text}
        </div>
    `).join('') || "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.";
}

function postComment() {
    const commentInput = document.getElementById('commentInput');
    const presetId = document.querySelector('.preset-card').id;
    if (commentInput.value.trim()) {
        addComment(presetId, commentInput.value.trim());
        commentInput.value = "";
        showComments(presetId);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    loadTheme();
    tg.BackButton.show().onClick(() => window.history.back());
    updateTopPresets();
    updateAchievementsUI();

    // –ü—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CP –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    setTimeout(() => {
        updateBalance(10);
        tg.showAlert('+10 CP –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!');
    }, 60000); // –ß–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
});
